<!-- Bootstrap 5 JS (includes Popper.js) -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<script>
  // Global confirmation function for delete operations
  function confirmDelete(event, url) {
    event.preventDefault();
    const deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
    deleteModal.show();
    document.querySelector('#deleteModal .btn-confirm').setAttribute('href', url);
  }

  document.addEventListener('DOMContentLoaded', function() {
    // Dark mode toggle functionality - FIXED VERSION
    const darkModeToggle = document.getElementById('darkModeToggle');
    if (darkModeToggle) {
      console.log("Dark mode toggle button found");
      
      // Apply current theme to page
      function applyTheme(themeName) {
        console.log("Applying theme:", themeName);
        document.documentElement.setAttribute('data-bs-theme', themeName);
        localStorage.setItem('darkMode', themeName);
        updateDarkModeIcon(themeName === 'dark');
      }
      
      // Update icon based on current theme
      function updateDarkModeIcon(isDarkMode) {
        const darkModeToggle = document.getElementById('darkModeToggle');
        if (!darkModeToggle) return;
        
        const icon = darkModeToggle.querySelector('i');
        if (icon) {
          // Tüm olası sınıfları kaldır
          icon.classList.remove('bi-moon', 'bi-moon-stars', 'bi-sun');
          
          // Doğru ikonu ekle
          if (isDarkMode) {
            icon.classList.add('bi-sun');
          } else {
            icon.classList.add('bi-moon-stars');
          }
        }
      }
      
      // Get current theme directly from HTML attribute
      const currentTheme = document.documentElement.getAttribute('data-bs-theme') || 'light';
      console.log("Current theme on page load:", currentTheme);
      
      // Update icon based on current theme
      updateDarkModeIcon(currentTheme === 'dark');
      
      // Toggle button event listener
      darkModeToggle.addEventListener('click', function() {
        console.log("Dark mode toggle clicked");
        const currentTheme = document.documentElement.getAttribute('data-bs-theme');
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        
        console.log("Switching from", currentTheme, "to", newTheme);
        applyTheme(newTheme);
      });
    } else {
      console.warn("Dark mode toggle button not found on this page");
    }

    // Flash mesajlarının otomatik kaybolması
    const flashMessages = document.getElementById('flash-messages');
    if (flashMessages && flashMessages.children.length > 0) {
      flashMessages.style.display = 'block';
      setTimeout(() => {
        flashMessages.style.display = 'none';
      }, 5000); // 5 saniye sonra kaybolur
    }

    // Şifre göster/gizle butonu
    const togglePassword = document.getElementById('togglePassword');
    if (togglePassword) {
      togglePassword.addEventListener('click', function () {
        const passwordInput = document.getElementById('password');
        const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
        passwordInput.setAttribute('type', type);

        // İkonu değiştir
        const icon = this.querySelector('i');
        icon.classList.toggle('bi-eye');
        icon.classList.toggle('bi-eye-slash');
      });
    }
  });

  // Global slug generation function
  function generateSlug(text) {
    return text.trim().toLowerCase()
        .replace(/[çĞğıİöşüÇĞIİÖŞÜ]/g, function(match) {
            const map = {
                'ç': 'c', 'Ç': 'c', 'ğ': 'g', 'Ğ': 'g',
                'ı': 'i', 'I': 'i', 'İ': 'i', 'i': 'i',
                'ö': 'o', 'Ö': 'o', 'ş': 's', 'Ş': 's',
                'ü': 'u', 'Ü': 'u'
            };
            return map[match] || match;
        })
        .replace(/[^a-z0-9]+/g, '-')
        .replace(/^-+|-+$/g, '');
}

  // RATE LIMIT COUNTDOWN - Sadece rate limit sayfasında çalışır
  const countdownElement = document.getElementById('countdown');
  const progressBar = document.getElementById('progressBar');

  if (countdownElement && progressBar) {
      console.log('Rate limit countdown initialized');
      
      let remainingTime = parseInt(countdownElement.textContent);
      const totalTime = remainingTime;
      
      const timer = setInterval(() => {
          remainingTime--;
          countdownElement.textContent = remainingTime;
          
          const progressPercent = (remainingTime / totalTime) * 100;
          progressBar.style.width = progressPercent + '%';
          
          if (remainingTime <= 0) {
              clearInterval(timer);
              countdownElement.textContent = '0';
              progressBar.style.width = '0%';
              setTimeout(() => {
                  window.location.reload();
              }, 1000);
          }
      }, 1000);
  }
</script>